

class UbootGame {

    static UbootGame instance;
    field Background background;
    field Sub sub;
    field Torpedo torpedo;
    field boolean exit;
    field int seed; // with [-32 768, 32 767]
    field int torpedo_speed_val;
    field int torpedo_speed_cntr;
    field int score;

    constructor UbootGame new() {
        // Clear the screen
        do Screen.clearScreen();
        let background = Background.new();
        let sub = Sub.new(background.getTop(), background.getBot());
        let seed = 1; 
        let score = 0;
        let torpedo_speed_val = 1;
        let torpedo_speed_cntr = 0;
        let torpedo = generateTorpedo(background);
        let exit = false;
        return this;
    }

    // TODO: we also need a torpedo de-generator here (hide and disposes at left X-limit)
    // ... We set a torpGone bool, which could be fed into this one along 
    //     with the torpedo object
    // Isnt this fixed by the torp.move() disposing of the torp??

    /** Deallocates the object's memory. */
    method void dispose() {
        do background.dispose();
	    do sub.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of a UbootGame. */
    function void newInstance() {
        let instance = UbootGame.new();
        return;
    }

    /** Returns this UbootGame. */
    function PongGame getInstance() {
        return instance;
    }

    method Torpedo generateTorpedo (Background background) {
        var Torpedo torpedoVar;
        let seed = updateSeed(seed, background.getTop(), background.getBot());
        let torpedoVar = Torpedo.new(seed*32, background, torpedo_speed_val);
        return torpedoVar;
    }

    method int updateSeed(int seed, int backgroundTop, int backgroundBot) {
        var int sizeY;
        var int quotient;
        var int remainder;
        // Using a Linear Congruential Generator
        // 1. Update Seed
        // seed = (a * seed + c) mod m
        let seed = (141 * seed) + 101;

        // Modulo operator keeps us within specified range
        // ... What is the specified range?
        // ... We know that the generated value must be multiplied
        // ... with (32) to generate a different row. 
        // ... The background_top/bot sets the boundary for which we 
        // ... are allowed to spawn. We also need to take into account
        // ... that the sprite occupies white space.
        // 
        let sizeY = (backgroundBot - backgroundTop)/32 + 1; // should this be divided by 32?
        // Integer quotient
        let quotient = seed / sizeY;
        // Remainder = 0 if common divisor, otherwise think modulo operation
        let remainder = quotient * sizeY;  
        // Update seed
        let seed = seed - remainder;
        // Confine the seed due to observed error
        if (seed > 6343) {
            let seed = 6400;
        }
        return seed;
    }


    method void updateScore(int score) {
        do Output.moveCursor(22,35);
        do Output.printInt(score);
        return;
    }

    /** Starts the game, and handles inputs from the user that control
     *  the sub's movement direction. */
    method void run() {
        var char key;
        var boolean torpedoOOB;
        var boolean sonarOnOff;
        var boolean sonarCooldown;
        var int sonarOnCounter;
        var int sonarCDcounter;

        while (~exit) {
            // waits for a key to be pressed (key = 0 is default non-press)
            do Sys.wait(110);
            let key = Keyboard.keyPressed();
            
            // -------------------------------------------------
            // Check for collisions
            // We know how to calculate when torpedo is @ X-limit.
            // Then we just check if @ X-limit and Y_sub_top <= Y_torp <= Y_sub_bot
            // If true, then collision, set exit to TRUE!!
            let exit = torpedo.collision(sub.getTop(), sub.getBot());
            
            // -------------------------------------------------
            // Torpedo movement and collision check
            // Note: Torpedo.move() will also dispose of the torpedo
            let torpedoOOB = torpedo.move(sonarOnOff);

            if (torpedoOOB) {
                // Torpedo has hit X-limit and is out-of-bounds
                if (torpedo_speed_cntr = 3) {
                    let torpedo_speed_cntr = 0;
                    if (torpedo_speed_val < 4) {
                        let torpedo_speed_val = torpedo_speed_val * 2;
                    }
                }
                else {
                    let torpedo_speed_cntr = torpedo_speed_cntr + 1;
                }
                let score = score + 1;
                do updateScore(score);
                let torpedo = generateTorpedo(background);
            }
            else {
                let exit = torpedo.collision(sub.getTop(), sub.getBot()); 
            }
            // -------------------------------------------------
            // Key press parsing
            if (key = 131) { 
                // Move up
                do sub.move(1);
            } 
	        if (key = 133) {
                // Move down 
                do sub.move(0);
            }
            // Sonar
            if (key = 130) {
                if (~(sonarCooldown)) {
                    let sonarOnOff = true;
                    do sub.sonarAnimation();
                    // Need to reanimate background in case sonar animation
                    // disturbs it
                    do background.draw(23,26);
                }
            }
            // ESC key
            if (key = 140) { 
                let exit = true; 
            }
            
            // Increment sonar counter
            if (sonarOnOff) {
                let sonarCooldown = true;
                if (sonarOnCounter = 32) {
                    let sonarOnCounter = 0;
                    let sonarOnOff = false;
                }
                else {
                    let sonarOnCounter = sonarOnCounter + 1;
                }
            }

            if (sonarCooldown) {
                if (sonarCDcounter = 48) {
                    let sonarCDcounter = 0;
                    let sonarCooldown = false;
                }
                else {
                    let sonarCDcounter = sonarCDcounter + 1;
                }
            }        

            let key = Keyboard.keyPressed();
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }

}